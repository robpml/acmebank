# MarkLogic-Node Generator

This application was generated by the MarkLogic-Node [Slush](https://github.com/klei/slush) generator, with the following components:

- [AngularJS](https://angularjs.org/)
- [Gulp](http://gulpjs.com/)
- [node.js](http://nodejs.org/): very thin layer, hosting the Angular code and proxying MarkLogic REST API requests
- [Roxy Deployer](https://github.com/marklogic/roxy): bootstrap MarkLogic databases, application servers, etc; scaffolding for MarkLogic REST API service extensions

# Running the application

- `$ ./ml local bootstrap`
- `$ ./ml local deploy modules`
- `$ ./ml local deploy content` # this uploads a dictionary for spell-suggestions
- edit gulpfile.js. In the options section near the top, set your desired ports
- `$ gulp` # this will watch the .less file for changes and compile them to .css and runs the node server

# Data
## Sample Data
The application comes with 25 JSON documents generated by json-generator.com. You can load them with MLCP like this:

```bash
  $ ./ml local mlcp import -input_file_path sample-data -document_type json
```

Replace the username and password if needed. The from-json.xqy module is provided in the sample application under the src/transform directory.

## General Data Information
The application assumes that you're storing JSON data. This shows up in the default format request for the MLRest service's searchContext, the detailController's (detail-ctrl.js) request to get a document, and in the out-of-the-box detail view.
